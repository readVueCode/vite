import{_ as s,c as n,o as a,U as p}from"./chunks/framework.29dee80d.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"server/2.http.md","lastUpdated":1684381496000}'),l={name:"server/2.http.md"},e=p(`<h2 id="resolvehttpserver" tabindex="-1">resolveHttpServer <a class="header-anchor" href="#resolvehttpserver" aria-label="Permalink to &quot;resolveHttpServer&quot;">​</a></h2><p>代码中的逻辑是首先判断是否传入了 <code>httpsOptions</code>，如果没有传入则返回一个 HTTP/1.x 的 HTTP 服务器</p><p>否则会根据 <code>proxy</code> 参数的值选择使用 HTTPS 还是 HTTP/2 协议创建服务器。如果 <code>proxy</code> 参数为 true，则使用 HTTPS 协议创建服务器，否则使用 HTTP/2 协议创建服务器，并且允许客户端回退使用 HTTP/1.x 协议。</p><p>因此，这段代码可以根据传入的参数选择使用不同的协议和服务器类型</p><h3 id="allowhttp1参数" tabindex="-1">allowHTTP1参数 <a class="header-anchor" href="#allowhttp1参数" aria-label="Permalink to &quot;allowHTTP1参数&quot;">​</a></h3><p><code>allowHTTP1</code> 是一个 Node.js 中 <code>http2</code> 模块的服务器选项。它是一个布尔类型的属性，用于控制是否允许使用 HTTP/1.x 协议来处理客户端请求。如果设置为 <code>false</code>（默认值），则只允许使用 HTTP/2 协议；如果设置为 <code>true</code>，则允许使用 HTTP/1.x 和 HTTP/2 两种协议。</p><p>在使用 <code>createSecureServer</code> 方法创建 HTTP/2 服务器时，可以通过设置 <code>allowHTTP1</code> 属性来指定是否允许使用 HTTP/1.x 协议。需要注意的是，当 <code>allowHTTP1</code> 设置为 <code>true</code> 时，服务器将同时支持 HTTP/1.x 和 HTTP/2 协议，这可能会影响服务器的性能。因此，在选择是否启用 HTTP/1.x 协议时，需要权衡性能和兼容性等方面的因素。</p><p>因为一些代理服务器不支持 HTTP/2 协议，所以需要回退到使用 HTTPS 协议来支持这些代理服务器。如果 <code>proxy</code> 参数为 <code>false</code>，则会选择使用 HTTP/2 协议创建服务器，以获得更好的性能和安全性。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolveHttpServer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;font-style:italic;">proxy</span><span style="color:#ABB2BF;"> }: </span><span style="color:#E5C07B;">CommonServerOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connect</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Server</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">httpsOptions</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpsServerOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HttpServer</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">httpsOptions</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">createServer</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;node:http&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// #484 fallback to http1 when proxy is needed.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">proxy</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">createServer</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;node:https&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">httpsOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">createSecureServer</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;node:http2&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createSecureServer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// Manually increase the session memory to prevent 502 ENHANCE_YOUR_CALM</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// errors on large numbers of requests</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">maxSessionMemory</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span><span style="color:#E06C75;">httpsOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">allowHTTP1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// @ts-expect-error TODO: is this correct?</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">HttpServer</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveHttpServer(</span></span>
<span class="line"><span style="color:#B392F0;">  { proxy }</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> CommonServerOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Connect.Server</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  httpsOptions</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> HttpsServerOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise&lt;HttpServer&gt; {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">httpsOptions) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">(</span><span style="color:#FFAB70;">&#39;node:http&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> createServer(app)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// #484 fallback to http1 when proxy is needed.</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (proxy) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">(</span><span style="color:#FFAB70;">&#39;node:https&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> createServer(httpsOptions</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> app)</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">createSecureServer</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">(</span><span style="color:#FFAB70;">&#39;node:http2&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> createSecureServer(</span></span>
<span class="line"><span style="color:#B392F0;">      {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// Manually increase the session memory to prevent 502 ENHANCE_YOUR_CALM</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// errors on large numbers of requests</span></span>
<span class="line"><span style="color:#B392F0;">        maxSessionMemory</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1000</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">httpsOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        allowHTTP1</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// @ts-expect-error TODO: is this correct?</span></span>
<span class="line"><span style="color:#B392F0;">      app</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    ) </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">unknown</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> HttpServer</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="node-http、node-https和node-http2有啥区别" tabindex="-1">node:http、node:https和node:http2有啥区别 <a class="header-anchor" href="#node-http、node-https和node-http2有啥区别" aria-label="Permalink to &quot;node:http、node:https和node:http2有啥区别&quot;">​</a></h2><p><code>node:http</code> 模块提供了创建基于 HTTP/1.x 协议的服务器的 API。这个模块允许你创建 HTTP 服务器，并在客户端和服务器之间传输纯文本数据。由于 HTTP 协议本身是明文的，所以它没有任何内置的安全性，并且可以容易地被中间人攻击。</p><p><code>node:https</code> 模块则提供了一个创建基于 HTTPS 协议的服务器的 API。HTTPS 协议是在 HTTP 协议之上增加了 SSL/TLS 加密和认证层的协议。通过使用 SSL/TLS，HTTPS 协议提供了数据加密和身份验证的保护，使得中间人攻击变得更加困难。</p><p><code>node:http2</code> 模块提供了一个创建基于 HTTP/2 协议的服务器的 API。HTTP/2 协议是 HTTP 协议的下一代标准，它引入了许多新的特性，如二进制传输、流、头部压缩等，可以显著提高性能。但是，由于 HTTP/2 协议相对较新，因此并不是所有的客户端都支持该协议，所以在使用 HTTP/2 协议时需要谨慎。</p><h2 id="http-1-x-和-http-2-两种协议有啥区别" tabindex="-1">HTTP/1.x 和 HTTP/2 两种协议有啥区别 <a class="header-anchor" href="#http-1-x-和-http-2-两种协议有啥区别" aria-label="Permalink to &quot;HTTP/1.x 和 HTTP/2 两种协议有啥区别&quot;">​</a></h2><p>HTTP/1.x 和 HTTP/2 是两种不同的 HTTP 协议版本。它们之间的主要区别在于以下几个方面：</p><ol><li>性能：HTTP/2 相对于 HTTP/1.x，具有更好的性能和速度。这是因为 HTTP/2 支持多路复用（multiplexing）和二进制分帧（binary framing）等特性，能够更好地利用网络资源，减少请求的延迟和响应时间，提高页面加载速度。</li><li>安全性：HTTP/2 要求使用加密的 HTTPS 协议，而 HTTP/1.x 则可以使用明文 HTTP 协议。因此，HTTP/2 相对于 HTTP/1.x，具有更好的安全性和隐私保护。</li><li>头部压缩：HTTP/2 支持头部压缩（header compression）功能，可以减少网络传输的数据量，提高页面加载速度。</li><li>服务器推送：HTTP/2 支持服务器推送（server push）功能，可以在客户端发出请求前，主动将一些资源推送给客户端，减少客户端的请求次数，提高页面加载速度。</li></ol><p>总的来说，HTTP/2 相对于 HTTP/1.x，具有更好的性能、安全性和效率，但是由于它的特性较新，可能在某些场景下兼容性不够好。因此，在选择使用哪种协议时，需要根据实际情况进行权衡和选择。</p><h2 id="https跟http-1-x和http-2的关系" tabindex="-1">HTTPS跟HTTP/1.x和HTTP/2的关系 <a class="header-anchor" href="#https跟http-1-x和http-2的关系" aria-label="Permalink to &quot;HTTPS跟HTTP/1.x和HTTP/2的关系&quot;">​</a></h2><p>HTTPS（Hyper Text Transfer Protocol Secure）是一种基于 SSL/TLS 协议的安全的 HTTP 协议。它对 HTTP 传输的数据进行了加密，保护了数据的安全性和隐私。</p><p>HTTP/1.x 和 HTTP/2 协议都可以使用 HTTPS 进行加密传输。在使用 HTTPS 协议时，客户端和服务器之间的数据传输是通过 SSL/TLS 协议进行加密和解密的。HTTPS 协议通常使用 TCP 协议的 443 端口进行传输，而 HTTP/1.x 和 HTTP/2 协议通常使用 TCP 协议的 80 和 443 端口进行传输。</p><p>在使用 HTTP/2 协议时，由于它具有更好的性能和安全性，通常建议使用 HTTPS 进行加密传输。由于 HTTP/2 支持头部压缩和二进制分帧等特性，可以减少网络传输的数据量，但是这也增加了网络攻击者利用 HTTP/1.x 协议中的明文头部进行攻击的可能性。因此，在使用 HTTP/2 协议时，使用 HTTPS 进行加密传输可以提高安全性和隐私保护。</p><h2 id="vite使用server-https" tabindex="-1">vite使用server.https <a class="header-anchor" href="#vite使用server-https" aria-label="Permalink to &quot;vite使用server.https&quot;">​</a></h2><blockquote><p><a href="https://cn.vitejs.dev/config/server-options.html#server-https" target="_blank" rel="noreferrer">https://cn.vitejs.dev/config/server-options.html#server-https</a></p></blockquote><ul><li><strong>类型：</strong> <code>boolean | https.ServerOptions</code></li></ul><p>启用 TLS + HTTP/2。注意：当 <a href="https://cn.vitejs.dev/config/server-options.html#server-proxy" target="_blank" rel="noreferrer"><code>server.proxy</code> 选项</a> 也被使用时，将会仅使用 TLS。</p><p>这个值也可以是一个传递给 <code>https.createServer()</code> 的 <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener" target="_blank" rel="noreferrer">选项对象</a>。</p><p>需要一个合法可用的证书。对基本使用的配置需求来说，你可以添加 <a href="https://github.com/vitejs/vite-plugin-basic-ssl" target="_blank" rel="noreferrer">@vitejs/plugin-basic-ssl</a> 到项目插件中，它会自动创建和缓存一个自签名的证书。但我们推荐你创建和使用你自己的证书。</p><p>注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。</p><h3 id="tls是什么意思" tabindex="-1">TLS是什么意思 <a class="header-anchor" href="#tls是什么意思" aria-label="Permalink to &quot;TLS是什么意思&quot;">​</a></h3><p>TLS代表传输层安全性协议，它是用于保护互联网通信安全的标准加密协议。TLS是SSL（安全套接字层）协议的继任者，用于在互联网上的客户端和服务器之间进行安全通信。通常，HTTPS协议会使用TLS来对数据进行加密和保护。</p>`,30),o=[e];function t(r,c,B,y,i,F){return a(),n("div",null,o)}const d=s(l,[["render",t]]);export{h as __pageData,d as default};
