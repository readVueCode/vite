import{_ as s,c as n,o as a,U as l}from"./chunks/framework.29dee80d.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"指南/源码解析.md","lastUpdated":1686041625000}'),p={name:"指南/源码解析.md"},o=l(`<h2 id="index-cjs" tabindex="-1">index.cjs <a class="header-anchor" href="#index-cjs" aria-label="Permalink to &quot;index.cjs&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* eslint-disable no-restricted-globals */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 禁用 ESLint 的 no-restricted-globals 规则，不进行全局变量的限制检查</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type utils</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// proxy cjs utils (sync functions)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过 Object.assign 将 ./dist/node-cjs/publicUtils.cjs 模块中的函数挂载到模块的导出上</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./dist/node-cjs/publicUtils.cjs&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// async functions, can be redirect from ESM build</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 异步函数，可以从ESM构建中重定向</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这样做的目的是将这些异步函数调用时动态地从 ./dist/node/index.js 模块中导入，实现了按需加载的效果</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncFunctions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;build&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;createServer&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;preview&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;transformWithEsbuild&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;resolveConfig&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;optimizeDeps&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;formatPostcssSourceMap&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;loadConfigFromFile&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;preprocessCSS&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">asyncFunctions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./dist/node/index.js&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">](...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// some sync functions are marked not supported due to their complexity and uncommon usage</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一些同步函数由于其复杂性和不常见的使用方式而被标记为不支持</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 简单来说，就是这两个函数不支持commonjs，当在commonjs中使用时需要报错提示，提示使用ESM或者动态导入</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">unsupportedCJS</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;resolvePackageEntry&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;resolvePackageData&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">unsupportedCJS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ESM是JavaScript的官方模块系统，使用import和export关键字来导入和导出模块。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 动态导入（dynamic imports）是一种在运行时根据条件或需要来动态加载模块的方式。它使用import()函数来实现，函数返回一个Promise，在Promise解析后可以访问导入的模块。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 两种方式的区别在于使用时机和语法形式。ESM适用于在模块的顶层直接导入使用，而动态导入适用于在运行时根据需要动态加载模块。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">\`&quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; is not supported in CJS build of Vite 4.</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">Please use ESM or dynamic imports </span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">const { </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> } = await import(&#39;vite&#39;)</span><span style="color:#56B6C2;">\\\`</span><span style="color:#98C379;">.\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* eslint-disable no-restricted-globals */</span></span>
<span class="line"><span style="color:#6B737C;">// 禁用 ESLint 的 no-restricted-globals 规则，不进行全局变量的限制检查</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// type utils</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">.defineConfig </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (config) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// proxy cjs utils (sync functions)</span></span>
<span class="line"><span style="color:#6B737C;">// 通过 Object.assign 将 ./dist/node-cjs/publicUtils.cjs 模块中的函数挂载到模块的导出上</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.assign(</span><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&#39;./dist/node-cjs/publicUtils.cjs&#39;</span><span style="color:#B392F0;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// async functions, can be redirect from ESM build</span></span>
<span class="line"><span style="color:#6B737C;">// 异步函数，可以从ESM构建中重定向</span></span>
<span class="line"><span style="color:#6B737C;">// 这样做的目的是将这些异步函数调用时动态地从 ./dist/node/index.js 模块中导入，实现了按需加载的效果</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncFunctions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;build&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;createServer&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;preview&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;transformWithEsbuild&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;resolveConfig&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;optimizeDeps&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;formatPostcssSourceMap&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;loadConfigFromFile&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&#39;preprocessCSS&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#79B8FF;">asyncFunctions</span><span style="color:#B392F0;">.forEach((name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">[name] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">args) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">(</span><span style="color:#FFAB70;">&#39;./dist/node/index.js&#39;</span><span style="color:#B392F0;">).then((i) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> i[name](</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">args))</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// some sync functions are marked not supported due to their complexity and uncommon usage</span></span>
<span class="line"><span style="color:#6B737C;">// 一些同步函数由于其复杂性和不常见的使用方式而被标记为不支持</span></span>
<span class="line"><span style="color:#6B737C;">// 简单来说，就是这两个函数不支持commonjs，当在commonjs中使用时需要报错提示，提示使用ESM或者动态导入</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">unsupportedCJS</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&#39;resolvePackageEntry&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;resolvePackageData&#39;</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#79B8FF;">unsupportedCJS</span><span style="color:#B392F0;">.forEach((name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">[name] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// ESM是JavaScript的官方模块系统，使用import和export关键字来导入和导出模块。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 动态导入（dynamic imports）是一种在运行时根据条件或需要来动态加载模块的方式。它使用import()函数来实现，函数返回一个Promise，在Promise解析后可以访问导入的模块。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 两种方式的区别在于使用时机和语法形式。ESM适用于在模块的顶层直接导入使用，而动态导入适用于在运行时根据需要动态加载模块。</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">\`&quot;</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">name</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">&quot; is not supported in CJS build of Vite 4.\\nPlease use ESM or dynamic imports \\\`const { </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">name</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;"> } = await import(&#39;vite&#39;)\\\`.\`</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    )</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>`,2),e=[o];function c(t,r,B,y,i,F){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{u as __pageData,b as default};
