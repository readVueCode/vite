import{_ as s,c as a,o as n,U as e}from"./chunks/framework.29dee80d.js";const u=JSON.parse('{"title":"贡献","description":"","frontmatter":{},"headers":[],"relativePath":"1.指南/贡献.md","lastUpdated":1686042994000}'),l={name:"1.指南/贡献.md"},p=e(`<h1 id="贡献" tabindex="-1">贡献 <a class="header-anchor" href="#贡献" aria-label="Permalink to &quot;贡献&quot;">​</a></h1><h2 id="ignoring-commits-when-running-git-blame-运行git-blame-时忽略commits" tabindex="-1">Ignoring commits when running <code>git blame</code> / 运行<code>git blame</code> 时忽略commits <a class="header-anchor" href="#ignoring-commits-when-running-git-blame-运行git-blame-时忽略commits" aria-label="Permalink to &quot;Ignoring commits when running \`git blame\` / 运行\`git blame\` 时忽略commits&quot;">​</a></h2><h3 id="git-blame" tabindex="-1">Git blame <a class="header-anchor" href="#git-blame" aria-label="Permalink to &quot;Git blame&quot;">​</a></h3><p>Git blame 是一个 Git 命令，用于显示文件的每一行是谁在何时进行的修改。它可以帮助你确定文件的每一部分是由哪个开发者贡献的，以及贡献的时间和提交信息。通过执行 git blame 命令，你可以逐行查看文件的修改历史，了解每一行的起源和相关信息，有助于代码审查、追溯 bug 以及了解代码演进过程中的贡献者。</p><p>在 Git 中，<code>git blame</code> 命令用于逐行地显示指定文件的每一行是由哪个提交引入的。默认情况下，<code>git blame</code> 会考虑所有的提交记录，包括文件中的所有更改。然而，有时候我们希望排除某些提交，例如仅关注代码逻辑变更，而忽略格式调整等次要更改。</p><p>为了实现这个目的，可以创建一个名为 <code>.git-blame-ignore-revs</code> 的文件，其中列出了要忽略的提交哈希值（commit hash）。每个提交哈希值占据文件中的一行。这些提交将在运行 <code>git blame</code> 时被忽略，即不会被考虑在内。</p><p>接下来，要让 <code>git blame</code> 命令使用 <code>.git-blame-ignore-revs</code> 文件，需要运行以下命令：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dark-plus vp-code-dark"><code><span class="line"><span style="color:#D4D4D4;">git </span><span style="color:#CE9178;">config</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">--local</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">blame.ignoreRevsFile</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">.git-blame-ignore-revs</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">git </span><span style="color:#98C379;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--local</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">blame.ignoreRevsFile</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.git-blame-ignore-revs</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将在本地 Git 配置中设置 <code>blame.ignoreRevsFile</code> 选项，指向 <code>.git-blame-ignore-revs</code> 文件，从而告诉 <code>git blame</code> 命令使用这个文件来忽略特定的提交。注意，该配置只对当前仓库有效（<code>--local</code> 参数指定）。</p><p>通过配置 <code>blame.ignoreRevsFile</code>，你可以灵活地控制 <code>git blame</code> 命令的行为，选择性地排除一些提交以获得更精确的代码溯源信息。</p><h3 id="git-blame-ignore-revs" tabindex="-1"><code>.git-blame-ignore-revs</code> <a class="header-anchor" href="#git-blame-ignore-revs" aria-label="Permalink to &quot;\`.git-blame-ignore-revs\`&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus vp-code-dark"><code><span class="line"><span style="color:#D4D4D4;"># chore: enable prettier trailing commas (#11167)</span></span>
<span class="line"><span style="color:#D4D4D4;">134ce6817984bad0f5fb043481502531fee9b1db</span></span>
<span class="line"><span style="color:#D4D4D4;"># chore: rename test packages (#11172)</span></span>
<span class="line"><span style="color:#D4D4D4;">5170e44920458090b8b43ee9cfe5010c25dfe22b</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#abb2bf;"># chore: enable prettier trailing commas (#11167)</span></span>
<span class="line"><span style="color:#abb2bf;">134ce6817984bad0f5fb043481502531fee9b1db</span></span>
<span class="line"><span style="color:#abb2bf;"># chore: rename test packages (#11172)</span></span>
<span class="line"><span style="color:#abb2bf;">5170e44920458090b8b43ee9cfe5010c25dfe22b</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="testing-vite-against-external-packages-使用外部包对-vite-进行测试" tabindex="-1">Testing Vite against external packages / 使用外部包对 Vite 进行测试 <a class="header-anchor" href="#testing-vite-against-external-packages-使用外部包对-vite-进行测试" aria-label="Permalink to &quot;Testing Vite against external packages / 使用外部包对 Vite 进行测试&quot;">​</a></h2><p>在测试自己对 Vite 进行的本地修改时，你可能希望将其与使用 Vite 构建的其他包进行测试。对于 pnpm，你可以使用 <code>pnpm.overrides</code> 来实现这一点。注意，<code>pnpm.overrides</code> 必须在根目录的 package.json 文件中指定，并且你必须在根 package.json 中将该包列为依赖项</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dark-plus vp-code-dark"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;dependencies&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;vite&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;^4.0.0&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;pnpm&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;overrides&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;vite&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;link:../path/to/vite/packages/vite&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;vite&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^4.0.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;pnpm&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;overrides&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;vite&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;link:../path/to/vite/packages/vite&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后重新运行 <code>pnpm install</code> 来链接该包。</p><p>上述配置中，我们在 <code>dependencies</code> 中列出了 <code>vite</code> 的版本要求，并在 <code>pnpm.overrides</code> 中指定了要使用的本地修改版本的路径。<code>link:../path/to/vite/packages/vite</code> 表示将指定路径下的 Vite 包链接到项目中，使得项目使用本地修改版本的 Vite。</p><p>通过这样的配置，你可以方便地将自己的修改应用到 Vite 项目中，并进行测试和验证。</p>`,18),o=[p];function c(t,i,r,d,b,m){return n(),a("div",null,o)}const D=s(l,[["render",c]]);export{u as __pageData,D as default};
