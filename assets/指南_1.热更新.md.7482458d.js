import{_ as n,c as a,C as l,U as p,o,D as e}from"./chunks/framework.29dee80d.js";const C=JSON.parse('{"title":"起步","description":"","frontmatter":{},"headers":[],"relativePath":"指南/1.热更新.md","lastUpdated":1683164791000}'),t={name:"指南/1.热更新.md"},r=p(`<h1 id="起步" tabindex="-1">起步 <a class="header-anchor" href="#起步" aria-label="Permalink to &quot;起步&quot;">​</a></h1><blockquote><p>src/node/server/hmr.ts</p></blockquote><p>处理热更新</p><h2 id="node-fs-promises前面的node-是什么意思" tabindex="-1"><code>node:fs/promises</code>前面的<code>node:</code>是什么意思 <a class="header-anchor" href="#node-fs-promises前面的node-是什么意思" aria-label="Permalink to &quot;\`node:fs/promises\`前面的\`node:\`是什么意思&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fsp</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:fs/promises&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:path&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Server</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;node:http&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> fsp </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:fs/promises&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> path </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:path&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">type</span><span style="color:#B392F0;"> { Server } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;node:http&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="为什么所有nodejs内置模块前面都加了node" tabindex="-1">为什么所有nodejs内置模块前面都加了<code>node:</code> <a class="header-anchor" href="#为什么所有nodejs内置模块前面都加了node" aria-label="Permalink to &quot;为什么所有nodejs内置模块前面都加了\`node:\`&quot;">​</a></h3><p>在 Node.js 中，模块名可以使用 &quot;模块解析算法&quot;（Module Resolution Algorithm）进行解析。这个算法包括几个步骤，其中一个是从内置模块中查找模块。内置模块是 Node.js 内置的模块，可以直接使用，而不需要安装。 在 Node.js 12 之前，fs/promises 模块还没有被纳入 Node.js 内置模块中。如果直接使用如 import fsp from &#39;fs/promises&#39; 这样的语法，Node.js 12 及以下版本中的模块解析算法会将它解析为一个外部模块，而不是内置模块。因此，在 Node.js 12 及以下版本中，这个语法会导致模块解析失败，进而导致运行时错误。 为了兼容 Node.js 12 及以下版本，可以使用如 node:fs/promises 这种语法来指定模块名。这样，模块解析算法就会将其解析为一个内置模块，即使在 Node.js 12 及以下版本中也能正常使用。</p><h2 id="readmodifiedfile函数" tabindex="-1">readModifiedFile函数 <a class="header-anchor" href="#readmodifiedfile函数" aria-label="Permalink to &quot;readModifiedFile函数&quot;">​</a></h2><p>这是一个异步函数 readModifiedFile，其作用是读取指定文件的内容并返回一个 Promise。</p><p>函数首先使用 Node.js 的 fsp.readFile 方法读取文件内容，如果文件内容为空，则表示可能在读取时太早了，因此需要等待一段时间，以便文件在磁盘上真正地修改完毕。为了达到这个目的，该函数会启动一个简单的轮询机制，定期检查文件的修改时间，直到文件的修改时间发生变化或者超过了 10 次检查，就会停止轮询并返回一个空字符串。</p><p>如果文件内容不为空，则表示文件已经完全更新，直接返回文件内容。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// vitejs/vite#610 when hot-reloading Vue files, we read immediately on file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// change event and sometimes this can be too early and get an empty buffer.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Poll until the file&#39;s modified time has changed before reading again.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在 hot-reloading Vue 文件时，我们会立即读取文件变化事件，有时这可能太早了，导致读取到空缓冲区。因此，我们需要在再次读取之前轮询文件的修改时间是否已更改。</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readModifiedFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">content</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">)).</span><span style="color:#E06C75;">mtimeMs</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">poll</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">newMtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">)).</span><span style="color:#E06C75;">mtimeMs</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newMtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">r</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">poll</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">poll</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">content</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// vitejs/vite#610 when hot-reloading Vue files, we read immediately on file</span></span>
<span class="line"><span style="color:#6B737C;">// change event and sometimes this can be too early and get an empty buffer.</span></span>
<span class="line"><span style="color:#6B737C;">// Poll until the file&#39;s modified time has changed before reading again.</span></span>
<span class="line"><span style="color:#6B737C;">// 在 hot-reloading Vue 文件时，我们会立即读取文件变化事件，有时这可能太早了，导致读取到空缓冲区。因此，我们需要在再次读取之前轮询文件的修改时间是否已更改。</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> readModifiedFile(file</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#B392F0;">&gt; {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">content</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.readFile(file</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;utf-8&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">content) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">mtime</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.stat(file)).mtimeMs</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((r) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> n </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> poll </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        n</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">newMtime</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.stat(file)).mtimeMs</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (newMtime </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> mtime </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> n </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          r(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          setTimeout(poll</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      setTimeout(poll</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    })</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.readFile(file</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;utf-8&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> content</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="获取指定文件的修改时间" tabindex="-1">获取指定文件的修改时间 <a class="header-anchor" href="#获取指定文件的修改时间" aria-label="Permalink to &quot;获取指定文件的修改时间&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">)).</span><span style="color:#E06C75;">mtimeMs</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">mtime</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.stat(file)).mtimeMs</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用了 fs/promises 模块中的 stat() 方法来获取文件的 stats 对象，然后从中取出 mtimeMs 属性，即文件的修改时间（以毫秒为单位），供后续轮询检查文件的修改时间发生变化</p><h2 id="这段代码轮询十次也就是100毫秒-为什么这样设计" tabindex="-1">这段代码轮询十次也就是100毫秒，为什么这样设计？ <a class="header-anchor" href="#这段代码轮询十次也就是100毫秒-为什么这样设计" aria-label="Permalink to &quot;这段代码轮询十次也就是100毫秒，为什么这样设计？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">poll</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">newMtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fsp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">)).</span><span style="color:#E06C75;">mtimeMs</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newMtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mtime</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">r</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">poll</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">poll</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((r) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> n </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> poll </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        n</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">newMtime</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fsp</span><span style="color:#B392F0;">.stat(file)).mtimeMs</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (newMtime </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> mtime </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> n </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">          r(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          setTimeout(poll</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      setTimeout(poll</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">10</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    })</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这种设计可以避免过于频繁的文件读取，同时又可以在文件更新后立即读取最新的文件内容。如果没有这个轮询的等待，可能会导致读取到旧的、缓存的文件内容，因为文件系统的更新可能会有一定的延迟。同时，如果轮询时间过长，会导致文件更新后无法立即获取最新内容，影响程序的正确性。因此，轮询时间需要在保证及时获取最新内容的同时，尽量减少不必要的文件读取操作。在这段代码中，轮询间隔是10毫秒，轮询10次即总共等待100毫秒，这个时间可以根据具体应用场景的需要进行调整。</p><h3 id="这里的r-0-有啥用" tabindex="-1">这里的r(0)有啥用? <a class="header-anchor" href="#这里的r-0-有啥用" aria-label="Permalink to &quot;这里的r(0)有啥用?&quot;">​</a></h3><p>将 Promise 的状态从等待中变为已完成（fulfilled），同时将结果值设置为 0。</p><h3 id="直接r-不行吗" tabindex="-1">直接r()不行吗? <a class="header-anchor" href="#直接r-不行吗" aria-label="Permalink to &quot;直接r()不行吗?&quot;">​</a></h3><p>可以的，r()和r(undefined)的效果是一样的。在这个函数中，r(0)只是为了返回一个假值，以便后续代码可以判断是否需要重新读取文件内容。如果r()或r(undefined)会更清晰明了，也可以这么写。</p>`,22);function c(B,y,F,i,d,A){const s=e("git-talk");return o(),a("div",null,[r,l(s)])}const b=n(t,[["render",c]]);export{C as __pageData,b as default};
